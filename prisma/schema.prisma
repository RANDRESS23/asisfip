generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Ciclos {
  id_ciclo    Int        @id @default(autoincrement())
  ciclo       String     @db.VarChar(20) @unique

  clases      Clases[]

  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model Dias_Clase {
  id_dia_clase      Int        @id @default(autoincrement())
  dia_clase         String     @db.VarChar(20) @unique

  horarios_clase    Horarios_Clase[]

  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
}

model Jornadas {
  id_jornada   Int        @id @default(autoincrement())
  jornada      String     @db.VarChar(20) @unique

  clases       Clases[]

  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model Sedes {
  id_sede     Int        @id @default(autoincrement())
  sede        String     @db.VarChar(20) @unique

  clases      Clases[]
  salones     Salones[]

  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model Estados {
  id_estado             Int                   @id @default(autoincrement())
  estado                String                @db.VarChar(20) @unique

  estados_estudiantes   Estados_Estudiantes[]
  estados_profesores    Estados_Profesores[]

  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
}

model Roles {
  id_rol            Int           @id @default(autoincrement())
  rol               String        @db.VarChar(20) @unique

  administradores   Administradores[]
  estudiantes       Estudiantes[]
  profesores        Profesores[]

  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
}

model Sexos {
  id_sexo          Int            @id @default(autoincrement())
  sexo             String         @db.VarChar(20) @unique

  administradores  Administradores[]
  estudiantes      Estudiantes[]
  profesores       Profesores[]

  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
}

model Tipos_Documento {
  id_tipo_documento Int           @id @default(autoincrement())
  tipo_documento    String        @db.VarChar(50) @unique

  administradores   Administradores[]
  estudiantes       Estudiantes[]
  profesores        Profesores[]

  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
}

model Facultades {
  id_facultad       Int         @id @default(autoincrement())
  facultad          String      @db.VarChar(100) @unique

  programas         Programas[]

  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model Programas {
  id_programa    Int         @id @default(autoincrement())
  programa       String      @db.VarChar(100) @unique

  id_facultad    Int         
  facultad       Facultades  @relation(fields: [id_facultad], references: [id_facultad], onDelete: Cascade)

  estudiantes    Estudiantes[]

  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@index([id_facultad])
}

model Grupos {
  id_grupo    Int         @id @default(autoincrement())
  grupo       String      @db.VarChar(20) @unique

  clases      Clases[]

  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

model Periodos {
  id_periodo    Int         @id @default(autoincrement())
  periodo       String      @db.VarChar(20) @unique

  clases        Clases[]

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model Salones {
  id_salon      Int         @id @default(autoincrement())
  salon         String      @db.VarChar(20) @unique

  id_sede       Int         
  sede          Sedes       @relation(fields: [id_sede], references: [id_sede], onDelete: Cascade)

  clases        Clases[]

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@index([id_sede])
}

model Estados_Estudiantes {
  id_estado_estudiante  Int           @id @default(autoincrement())
  
  id_estudiante         Int           @unique
  estudiante            Estudiantes   @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)

  id_estado             Int           
  estado                Estados       @relation(fields: [id_estado], references: [id_estado], onDelete: Cascade)

  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt

  @@index([id_estudiante])
  @@index([id_estado])
}

model Estados_Profesores {
  id_estado_profesor    Int           @id @default(autoincrement())
  
  id_profesor           Int           @unique
  empleado              Profesores    @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)

  id_estado             Int           
  estado                Estados       @relation(fields: [id_estado], references: [id_estado], onDelete: Cascade)

  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt

  @@index([id_profesor])
  @@index([id_estado])
}

model Administradores {
  id_administrador       Int                  @id @default(autoincrement())
  primer_nombre          String               @db.VarChar(50)
  segundo_nombre         String?              @db.VarChar(50)
  primer_apellido        String               @db.VarChar(50)
  segundo_apellido       String?              @db.VarChar(50)
  
  id_tipo_documento      Int
  tipo_documento         Tipos_Documento      @relation(fields: [id_tipo_documento], references: [id_tipo_documento], onDelete: Cascade)

  numero_documento       String               @db.VarChar(20) @unique

  correo                 String               @db.VarChar(50) @unique
  clave                  String 

  id_sexo                Int
  sexo                   Sexos                @relation(fields: [id_sexo], references: [id_sexo], onDelete: Cascade)

  celular                String               @db.VarChar(20) @unique

  id_rol                 Int
  rol                    Roles                @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade)

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@index([id_tipo_documento])
  @@index([id_sexo])
  @@index([id_rol])
}

model Estudiantes {
  id_estudiante               Int             @id @default(autoincrement())
  primer_nombre               String          @db.VarChar(50)
  segundo_nombre              String?         @db.VarChar(50)
  primer_apellido             String          @db.VarChar(50)
  segundo_apellido            String?         @db.VarChar(50)
  
  id_tipo_documento           Int             
  tipo_documento              Tipos_Documento @relation(fields: [id_tipo_documento], references: [id_tipo_documento], onDelete: Cascade)

  numero_documento            String          @db.VarChar(20) @unique

  id_programa                 Int             
  programa                    Programas       @relation(fields: [id_programa], references: [id_programa], onDelete: Cascade)

  correo_institucional        String          @db.VarChar(50) @unique
  clave                       String 

  id_sexo                     Int             
  sexo                        Sexos           @relation(fields: [id_sexo], references: [id_sexo], onDelete: Cascade)

  celular                     String          @db.VarChar(20) @unique
  saldo                       Int             @default(0)

  id_rol                      Int             
  rol                         Roles           @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade)

  estados_estudiantes         Estados_Estudiantes[]
  estudiante_clases           Estudiante_Clases[]
  asistencias_profesores      Asistencias_Estudiantes[]
  log_asistencias_profesores  Log_Asistencias_Estudiantes[]

  created_at                  DateTime        @default(now())
  updated_at                  DateTime        @updatedAt

  @@index([id_tipo_documento])
  @@index([id_programa])
  @@index([id_sexo])
  @@index([id_rol])
}

model Profesores {
  id_profesor                 Int             @id @default(autoincrement())
  primer_nombre               String          @db.VarChar(50)
  segundo_nombre              String?         @db.VarChar(50)
  primer_apellido             String          @db.VarChar(50)
  segundo_apellido            String?         @db.VarChar(50)
  
  id_tipo_documento           Int             
  tipo_documento              Tipos_Documento @relation(fields: [id_tipo_documento], references: [id_tipo_documento], onDelete: Cascade)

  numero_documento            String          @db.VarChar(20) @unique

  correo_institucional        String          @db.VarChar(50) @unique
  clave                       String 

  id_sexo                     Int             
  sexo                        Sexos           @relation(fields: [id_sexo], references: [id_sexo], onDelete: Cascade)

  celular                     String          @db.VarChar(20) @unique

  id_rol                      Int             
  rol                         Roles           @relation(fields: [id_rol], references: [id_rol], onDelete: Cascade)

  estados_profesores          Estados_Profesores[]
  clases                      Clases[]
  asistencias_profesores      Asistencias_Profesores[]
  log_asistencias_profesores  Log_Asistencias_Profesores[]

  created_at                  DateTime        @default(now())
  updated_at                  DateTime        @updatedAt

  @@index([id_tipo_documento])
  @@index([id_sexo])
  @@index([id_rol])
}

model Clases {
  id_clase                     Int             @id @default(autoincrement())
  clase                        String          @db.VarChar(100)

  id_profesor                  Int             
  profesor                     Profesores      @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)

  id_grupo                     Int             
  grupo                        Grupos          @relation(fields: [id_grupo], references: [id_grupo], onDelete: Cascade)
  
  id_sede                      Int             
  sede                         Sedes           @relation(fields: [id_sede], references: [id_sede], onDelete: Cascade)
  
  id_ciclo                     Int             
  ciclo                        Ciclos          @relation(fields: [id_ciclo], references: [id_ciclo], onDelete: Cascade)
  
  id_periodo                   Int             
  periodo                      Periodos        @relation(fields: [id_periodo], references: [id_periodo], onDelete: Cascade)
  
  id_jornada                   Int         
  jornada                      Jornadas        @relation(fields: [id_jornada], references: [id_jornada], onDelete: Cascade)

  id_salon                     Int             
  salon                        Salones         @relation(fields: [id_salon], references: [id_salon], onDelete: Cascade)

  fecha_inicio                 DateTime        @db.Date
  fecha_fin                    DateTime        @db.Date
  
  created_at                   DateTime        @default(now())
  updated_at                   DateTime        @updatedAt

  horarios_clase               Horarios_Clase[]
  estudiante_clases            Estudiante_Clases[]
  asistencias_estudiantes      Asistencias_Estudiantes[]
  asistencias_profesores       Asistencias_Profesores[]
  log_asistencias_estudiantes  Log_Asistencias_Estudiantes[]
  log_asistencias_profesores   Log_Asistencias_Profesores[]

  @@index([id_profesor])
  @@index([id_grupo])
  @@index([id_sede])
  @@index([id_ciclo])
  @@index([id_periodo])
  @@index([id_jornada])
  @@index([id_salon])
}

model Horarios_Clase {
  id_horario_clase       Int             @id @default(autoincrement())

  id_clase               Int             @unique
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  id_dia_clase           Int             
  dia_clase              Dias_Clase      @relation(fields: [id_dia_clase], references: [id_dia_clase], onDelete: Cascade)

  hora_inicio            DateTime        @db.Time
  hora_fin               DateTime        @db.Time

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_clase])
  @@index([id_dia_clase])
}

model Estudiante_Clases {
  id_estudiante_clase    Int             @id @default(autoincrement())

  id_estudiante          Int             
  estudiante             Estudiantes     @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)

  id_clase               Int             
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_estudiante])
  @@index([id_clase])
}

model Asistencias_Estudiantes {
  id_asistencia          Int             @id @default(autoincrement())

  id_clase               Int             
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  id_estudiante          Int             
  estudiante             Estudiantes     @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)

  fecha_dia              DateTime        @db.Date
  hora_entrada           DateTime        @db.Time

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_clase])
  @@index([id_estudiante])
}

model Asistencias_Profesores {
  id_asistencia          Int             @id @default(autoincrement())

  id_clase               Int             
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  id_profesor            Int             
  profesor               Profesores      @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)

  fecha_dia              DateTime        @db.Date
  hora_entrada           DateTime        @db.Time

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_clase])
  @@index([id_profesor])
}

model Log_Asistencias_Estudiantes {
  id_asistencia          Int             @id @default(autoincrement())

  id_clase               Int             
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  id_estudiante          Int             
  estudiante             Estudiantes     @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)

  fecha_dia              DateTime        @db.Date
  hora_entrada           DateTime        @db.Time

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_clase])
  @@index([id_estudiante])
}

model Log_Asistencias_Profesores {
  id_asistencia          Int             @id @default(autoincrement())

  id_clase               Int             
  clase                  Clases          @relation(fields: [id_clase], references: [id_clase], onDelete: Cascade)

  id_profesor            Int             
  profesor               Profesores      @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)

  fecha_dia              DateTime        @db.Date
  hora_entrada           DateTime        @db.Time

  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt

  @@index([id_clase])
  @@index([id_profesor])
}